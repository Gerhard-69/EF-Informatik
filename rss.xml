<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lern Blog Blog</title>
        <link>https://Gerhard-69.github.io/EF-Informatik/</link>
        <description>Lern Blog Blog</description>
        <lastBuildDate>Fri, 24 Mar 2023 14:34:48 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>de</language>
        <item>
            <title><![CDATA[Datenstruktur]]></title>
            <link>https://Gerhard-69.github.io/EF-Informatik/Datenstruktur</link>
            <guid>/Datenstruktur</guid>
            <pubDate>Fri, 24 Mar 2023 14:34:48 GMT</pubDate>
            <description><![CDATA[Das Spielfeld besteht aus Zeilen und diese wiederrum auf Spalten und in diesen Spalten sind wiederum Zahlen. "Verbindet" man diese Zahlen werden die Spalten neu definiert.]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" src="/EF-Informatik/assets/images/Datenstruktur-89de331e7d798e10904e0f21cc8c5f3a.PNG" width="2031" height="1345" class="img_ev3q"></p><p>Das Spielfeld besteht aus Zeilen und diese wiederrum auf Spalten und in diesen Spalten sind wiederum Zahlen. "Verbindet" man diese Zahlen werden die Spalten neu definiert.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Numtrip Blog]]></title>
            <link>https://Gerhard-69.github.io/EF-Informatik/Numtrip</link>
            <guid>/Numtrip</guid>
            <pubDate>Fri, 24 Mar 2023 14:34:48 GMT</pubDate>
            <description><![CDATA[Ziel des Spiels]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ziel-des-spiels">Ziel des Spiels<a class="hash-link" href="#ziel-des-spiels" title="Direkter Link zur Überschrift">​</a></h2><p>Numtrip ist ein Denkspiel das ähnlichkeiten dem sehr populären Spiel 2048 hat. Das Feld besteht auf gleich viel Reihen und Zeilen. Die Felder sind gefüllt zufälligen geraden Zahlen. Man kann ein Feld auswählen, wenn ein anligendes Feld mit der selben Zahl gefüllt werden diese und die mit diesem Feld anliegende Verbunden. Das ausgewählte feld wird verdoppelt. Das ganze geht so bis man 1024 erreicht hat.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="umsetzung-des-spiels">Umsetzung des Spiels<a class="hash-link" href="#umsetzung-des-spiels" title="Direkter Link zur Überschrift">​</a></h2><p><strong>Vorraussetzungen</strong><br>
<!-- -->Um Numtrip spielen zu können braucht man Python, ich habe Visual Studio Code verwendet. Den Code findet man auf meinem Github<br>
<a href="https://github.com/Gerhard-69/EF-Informatik/blob/main/docs/Numtrip/game.py" target="_blank" rel="noopener noreferrer">https://github.com/Gerhard-69/EF-Informatik/blob/main/docs/Numtrip/game.py</a></p><p><strong>Top-Down-Entwurf</strong><br>
<!-- -->Mein aktualisierter Tod-Down Entwurf sieht so aus:
<img loading="lazy" src="/EF-Informatik/assets/images/Topdown2-fcfe7edadf8f42b2d37e83f348b73263.png" width="1945" height="1466" class="img_ev3q"></p><p><strong>Meine lost Definition</strong><br>
<em>lost()</em> ist meine definition um zu überprüfen ob noch ein Spielzug möglich ist.</p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">global</span><span class="token plain"> loss</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>als erstes bestimme ich das sich die definition den globalen Scope von der Variabel loss verändern soll. Dies mache ich, da ich das Beenden des Spieles in einer anderen Definition mache.</p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">'for i in range(5):'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        old </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> board</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> board</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                loss </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> loss </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> board</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                loss </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> loss </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> board</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                loss </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> y </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> board</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">y</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                loss </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">'x = x-1'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Die orangenen Zeilen sind dafür verantwortlich damit man die Zeilen von unten nach oben sprich von 5 bis 1 durchgeht. </p><p>Die anderen Zeilen sind zum zählen der nicht möglichen Spielzüge oder der möglichen Spielzüge. Wenn ich Spielzug möglich ist breche ich die Definition ab weil einer schon reicht um weiterspielen zu können.  </p><p>die old variable merkt sich den Wert in der Zelle die ich gerade überprüfe.  </p><p>Einen Trick den ich noch verwende ist, dass ich nur die Zellen über und rechts neben mir anschaue. Das mache ich da ich von links nach rechts also von Reihe 1 nach 5 das Feld überprüfe.</p><div class="language-py codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-py codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    y </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> y</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lost</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="In die Zwischenablage kopieren" title="Kopieren" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>hier setze ich die Zeile wieder auf den "Normalwert" und gehe in die nächste Reihe. Zum Schluss noch eine Rekursion und schon ist die ganze Definition fertig</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="grösste-herrausforderung">Grösste Herrausforderung<a class="hash-link" href="#grösste-herrausforderung" title="Direkter Link zur Überschrift">​</a></h2><p>Ich bin beim Programmieren sehr oft auf Probleme gestossen die ich mal mehr mal weniger elegant gelöst habe. Ein Problem auf das ich immer wieder gestossen bin hat sich in meiner feldverschiebung definition abgespielt. Diese hat zwar immer funktioniert aber nie ganz, da ich nie smart genug war mehrere senarien zu testen und sie dann nur für einen speziellen Fall funktioniert hat. Also musste ich immer wieder zu der Definition zurückkehren um mir erneut gedanken dazu zu machen. Ein Beispiel ist das Bedenken von mehreren übereinander liegenden Feldern. Dass sowas passieren kann ist mir während dem Spielen aufgefallen also musste ich erstmal den Übeltäter ausfindig machen. Als sich dann wie so oft die Feldverschiebung als Problemkind herrausstellte habe ich mich zusätzlich noch sehr dumm beim lösen des Problems angestellt. Nach viel Zeit hab ich eine gefunden die sich aber nicht wirklich als platzsparend herrausgestellt hat.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tipps">Tipps<a class="hash-link" href="#tipps" title="Direkter Link zur Überschrift">​</a></h2><p>Mein Tipp an andere EF-Schüler. Macht euch Notizen zum Code. Hätte ich dass von Anfang an gemacht wäre mir einiges an Zeit erspart geblieben da wenn mir ein Fehler in einer Definition aufgefallen ist, musste ich mir erstmal wieder den ganzen Code anschauen und verstehen welche Gedanken ich mir damals dazu gemacht habe.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top-Down-Entwurf]]></title>
            <link>https://Gerhard-69.github.io/EF-Informatik/Top-Down-Entwurf</link>
            <guid>/Top-Down-Entwurf</guid>
            <pubDate>Fri, 24 Mar 2023 14:34:48 GMT</pubDate>
            <description><![CDATA[Wir haben einmal das Spielfeld in dem schauen müssen, dass zwei oder drei stellige Zahlen zentriert sind und das wir nach einem Spielzug das Feld wieder auffüllen. (Visuelles)]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" src="/EF-Informatik/assets/images/TopDown Numtrip-bf482b41ab1db54c5de628f2a955df52.png" width="2016" height="1512" class="img_ev3q"></p><p>Wir haben einmal das Spielfeld in dem schauen müssen, dass zwei oder drei stellige Zahlen zentriert sind und das wir nach einem Spielzug das Feld wieder auffüllen. (Visuelles)</p><p>Im Spielzweig passiert alles was man während dem spielen nicht sieht also ob der Spielzug gültig ist, ob das Spiel gestartet wurde und wieviele Punkte der Spieler hat mit einem dementsprechenden Spielende.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lernjournal]]></title>
            <link>https://Gerhard-69.github.io/EF-Informatik/2022/12/02/Lernjournal Numtrip</link>
            <guid>/2022/12/02/Lernjournal Numtrip</guid>
            <pubDate>Fri, 02 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Sieht vielleicht nicht übersichtlich aus und ist auch nicht gerade die kürzeste Code dafür funktioniert er gut. Die while-Schleife sorgt dafür, dass man beliebig viele Spielzüge machen kann. Dann mit dem Input frage ich nach dem Feld. Damit ich mit der Eingabe weiterarbeiten kann wandle ich sie in einen Integer um. Da die erste Stelle in der Matrix bei 0:0 ist ich aber sie mit 1-5 angeschrieben habe muss ich jetzt noch -1 von der Eingabe rechnen. Zum Schluss nur noch das ausgewählt Feld in der Matrix leeren und das Ergebnis neue Spielfeld anzeigen.]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" src="/EF-Informatik/assets/images/Numtrip spielereingabe-b2620a4f0789971dcc7bdd3139ca635e.PNG" width="809" height="361" class="img_ev3q"></p><p>Sieht vielleicht nicht übersichtlich aus und ist auch nicht gerade die kürzeste Code dafür funktioniert er gut. Die while-Schleife sorgt dafür, dass man beliebig viele Spielzüge machen kann. Dann mit dem Input frage ich nach dem Feld. Damit ich mit der Eingabe weiterarbeiten kann wandle ich sie in einen Integer um. Da die erste Stelle in der Matrix bei 0:0 ist ich aber sie mit 1-5 angeschrieben habe muss ich jetzt noch -1 von der Eingabe rechnen. Zum Schluss nur noch das ausgewählt Feld in der Matrix leeren und das Ergebnis neue Spielfeld anzeigen.</p><p>02.12.22
Ich habe einen Grossteil der Zeit damit verbracht die Überprufung der Benutzereingabe zu programmieren, dafür funktioniert sie jetzt auch wie geplant. Den rest der Zeit habe ich versucht die nächste Aufgabe zu lösen die ich nicht wirklich verstanden habe. Valentin hat von einer anderen Seite eine andere und besser erklärte Lösung gefunden die bei mir aber noch nicht ganz richtig funktioniert.</p>]]></content:encoded>
        </item>
    </channel>
</rss>